<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:spring="http://www.infinispan.org/schemas/spring" 
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd http://www.infinispan.org/schemas/spring http://www.infinispan.org/schemas/infinispan-spring-5.0.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"
	default-autowire="byName">
	
<!-- 	<import resource="application-mybatis.xml"/> -->
<!-- 	<import resource="application-dubbo.xml"/> -->
	
	<!-- 默认是基于java interface代理，proxy-target-class="true"表示基于cglib代理。 expose-proxy="true"表示将aop放到AopContext中，供查询 -->
<!-- 	<aop:aspectj-autoproxy proxy-target-class="true"/> -->
	
	<!--扫描@Autowired等注解，自动装配bean-->
	<context:annotation-config />
	
	<!--自动扫描的包，包含子包，可以使用切点表达式指定更精确一点。多个用逗号分隔-->
	<context:component-scan base-package="com.vteba">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!--读取配置属性文件-->
	<bean id="propUtils" class="com.vteba.utils.common.PropUtils">
		<property name="locations">
			<list>
				<value>file:/opt/config.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="configProfile" class="com.dangdang.config.service.zookeeper.ZookeeperConfigProfile">
		<constructor-arg name="connectStr" value="${zookeeper.hosts}" />
		<constructor-arg name="rootNode" value="${rootNode}" />
		<constructor-arg name="version" value="${version}" /><!-- 会作为一个节点 -->
	</bean>
	<bean id="sysConfig" class="com.dangdang.config.service.zookeeper.ZookeeperConfigGroup"
		c:configProfile-ref="configProfile" 
		c:node="system" />
	
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="false" />
		<!-- 参数化SQL(多个语句相同,参数不同)合并 -->
		<property name="mergeSql" value="true" />
	</bean>
	
	<!-- WallFilter基于SQL语义分析来实现防御SQL注入攻击. 把logViolation设置为true，而throwException设置为false。就可以观察是否存在违规的情况，同时不影响业务运行。 -->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
		<!-- 对被认为是攻击的SQL进行LOG.error输出 -->
		<property name="logViolation" value="true" />
		<!-- 对被认为是攻击的SQL抛出SQLExcepton -->
		<property name="throwException" value="false" />
	</bean>
	
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="resultSetLogEnabled" value="false" />
		<!-- 输出可执行的SQL log4j里设置log4j.logger.druid.sql.Statement=DEBUG,生产环境设置为false,log级别设置为ERROR -->
		<property name="statementExecutableSqlLogEnable" value="true" />
		<property name="connectionConnectAfterLogEnabled" value="false" />
		<property name="statementLogEnabled" value="false" />
		<property name="statementCloseAfterLogEnabled" value="false" />
		<property name="statementParameterSetLogEnabled" value="false" />
		<property name="statementPrepareAfterLogEnabled" value="false" />
		<property name="statementExecuteAfterLogEnabled" value="false" />
		<property name="resultSetCloseAfterLogEnabled" value="false" />
	</bean>
	
	<bean id="tiantianDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	      
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="20" />
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	  
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	 
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	 
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计，重复 -->
<!-- 	    <property name="filters" value="stat"/> -->
	    <!-- 自动清除无用连接 -->
		<property name="removeAbandoned" value="true" />
		<!-- 清除无用连接的等待时间1800秒，也就是30分钟.关闭长时间不使用的连接 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 连接属性 -->
		<property name="connectionProperties" value="clientEncoding=UTF-8" />
		<!-- 用于统计监控信息 ,StatFilter的几种配置方式: 1、proxyFilters属性自定义 2、StatFilter简化配置方式，通过filters属性value="mergeStat" 
			3、可以通过connectProperties属性来打开mergeSql功能druid.stat.mergeSql=true 4、通过JVM参数:-Ddruid.stat.mergeSql=true -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="log-filter" />
				<ref bean="wall-filter" />
			</list>
		</property>
	</bean>
	
	<bean id="tiantian2DataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	      
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="20" />
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	  
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	 
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	 
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计，重复 -->
<!-- 	    <property name="filters" value="stat"/> -->
	    <!-- 自动清除无用连接 -->
		<property name="removeAbandoned" value="true" />
		<!-- 清除无用连接的等待时间1800秒，也就是30分钟.关闭长时间不使用的连接 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 连接属性 -->
		<property name="connectionProperties" value="clientEncoding=UTF-8" />
		<!-- 用于统计监控信息 ,StatFilter的几种配置方式: 1、proxyFilters属性自定义 2、StatFilter简化配置方式，通过filters属性value="mergeStat" 
			3、可以通过connectProperties属性来打开mergeSql功能druid.stat.mergeSql=true 4、通过JVM参数:-Ddruid.stat.mergeSql=true -->
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="log-filter" />
				<ref bean="wall-filter" />
			</list>
		</property>
	</bean>
	
	<!-- SpringJdbcTemplate -->
	<bean id="tiantianJdbcTemplate" class="com.vteba.tx.jdbc.spring.SpringJdbcTemplate">
		<property name="dataSource" ref="tiantianDataSource"/>
	</bean>
	
    <!-- 事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="tiantianDataSource" />
	</bean>
    
	<!--切面事务-->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager"> 
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="list*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="load*" propagation="REQUIRED" read-only="true"/> 
			<tx:method name="unique*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="persist*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED" timeout="4000" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="create*" propagation="REQUIRED"/>
			<tx:method name="execute*" propagation="REQUIRED"/>
			<tx:method name="auto*" propagation="REQUIRED"/>
			<tx:method name="batch*" propagation="REQUIRED"/>
			<tx:method name="check*" propagation="REQUIRED"/>
			<tx:method name="calculate*" propagation="REQUIRED"/>
			<tx:method name="handle*" propagation="REQUIRED"/>
			<tx:method name="decide*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" timeout="6000" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
		</tx:attributes> 
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.vteba..*.service.impl.*.*(..))" id="serviceMethodPointCut"/>
		<!-- 基于类的代理，所以，继承的基类上也要切事务 -->
		<aop:pointcut expression="execution(* com.vteba..*.generic.impl.*.*(..))" id="commonMethodPointCut"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="serviceMethodPointCut"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="commonMethodPointCut"/>
	</aop:config>

<!-- 	<tx:annotation-driven transaction-manager="transactionManager" order="11"/> -->

	<!-- 基于Kryo的序列化工具 -->
	<bean id="kryoer" class="com.vteba.utils.serialize.Kryoer">
		<property name="packagesToScan">
			<set>
				<value>com.vteba.batch.user.model</value>
				<value>com.vteba.batch.investor.model</value>
				<value>com.vteba.batch.send.model</value>
			</set>
		</property>
		<property name="startupInitial" value="true" />
		<property name="classSet">
			<set>
				<value>com.alibaba.rocketmq.common.message.Message</value>
			</set>
		</property>
	</bean>
	
	<!-- RocketMQ消费者， 建议一个Topic配置一个，注意订阅的Topic要和MessageListener是配对的-->
<!-- 	<bean id="rocketMQMessageConsumer" class="com.vteba.mq.rocketmq.consumer.RocketMQMessageConsumer" init-method="init" destroy-method="destroy"> -->
<!-- 		<property name="namesrvAddr" value="192.168.1.31:9876" /> -->
<!-- 		<property name="consumerGroup" value="userGroup" /> -->
<!-- 		<property name="topic" value="YinleiUser" /> -->
<!-- 		<property name="subExpression" value="Test" /> -->
		<!-- 如果有多个Topic，建议使用这种方式：key是Topic，value是tags -->
<!-- 		<property name="topicSubExpressionMap"> -->
<!-- 			<map> -->
<!-- 				<entry key="YinleiUser" value="Test||Test1" /> -->
<!-- 				<entry key="YinleiUser2" value="Test2" /> -->
<!-- 			</map> -->
<!-- 		</property> -->
<!-- 		<property name="kryoer" ref="kryoer" /> -->
		<!-- 业务监听器 -->
<!-- 		<property name="messageListener" ref="simpleRocketMQMessageListener" /> -->
		<!-- 强制业务层自己使用kryo反序列化 -->
<!-- 		<property name="forceServiceDeserialize" value="true" /> -->
<!-- 		<property name="initTopic" value="false" /> -->
<!-- 	</bean> -->
	
	<!-- RocketMQ生产者，建议使用一个应用配置一个 -->
	<bean id="rocketMQMessageProducer" class="com.vteba.mq.rocketmq.producer.RocketMQMessageProducer"  init-method="init" destroy-method="destroy">
		<property name="namesrvAddr" value="localhost:9876;localhost:9875" />
		<property name="producerGroup" value="userGroup" />
		<property name="topic" value="YinleiUser" />
		<property name="tags" value="Test" />
		<property name="kryoer" ref="kryoer" />
		<property name="redisService" ref="redisService" />
		<property name="databaseCacheEnable" value="true" />
		<property name="successCacheEnable" value="false" />
		<property name="dataSource" ref="tiantianDataSource" />
	</bean>

	<bean id="rmqMessageProducer" class="com.vteba.mq.rocketmq.producer.RocketMQMessageProducer"  init-method="init" destroy-method="destroy">
		<property name="namesrvAddr" value="localhost:9876;localhost:9875" />
		<property name="producerGroup" value="RMQGroup" />
		<property name="topic" value="RMQTopic" />
		<property name="tags" value="RMQTags" />
		<property name="kryoer" ref="kryoer" />
		<property name="redisService" ref="redisService" />
		<property name="databaseCacheEnable" value="true" />
		<property name="successCacheEnable" value="false" />
		<property name="dataSource" ref="tiantianDataSource" />
	</bean>

	<bean id="idsGenerator" class="com.vteba.utils.id.IdsGenerator">
		<property name="length" value="7" />
	</bean>
	
	<!-- zookeeper -->
	<bean id="curatorFrameworkService" class="com.vteba.zookeeper.CuratorFrameworkService" init-method="init" destroy-method="close">
		<property name="connectionString" value="${zookeeper.hosts}" />
		<property name="maxRetries" value="3" />
		<property name="acquireTimeout" value="5000" />
		<property name="baseSleepTimeMs" value="1000" />
	</bean>
	
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxTotal}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
		<!-- 对于ShardsJedisSentinelPool，应该为true，否则可能获取到失效的连接，在切换master的时候 -->
 		<property name="testOnReturn" value="true"/>
 		<property name="testWhileIdle" value="true"/>
<!--  		<property name="numTestsPerEvictionRun" value="1024"/> -->
<!--         <property name="timeBetweenEvictionRunsMillis" value="30000" /> -->
<!--         <property name="minEvictableIdleTimeMillis" value="-1" /> -->
<!--         <property name="softMinEvictableIdleTimeMillis" value="10000" /> -->
        
<!--         <property name="jmxEnabled" value="true"/> -->
<!--         <property name="jmxNamePrefix" value="youyuan"/> -->
<!--         <property name="blockWhenExhausted" value="false"/> -->
	</bean>

<!-- 	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool" destroy-method="destroy"> -->
<!-- 	 	<constructor-arg ref="jedisPoolConfig"/> -->
<!-- 	 	<constructor-arg> -->
<!-- 			<list> -->
<!-- 			 	<bean class="redis.clients.jedis.JedisShardInfo"> -->
<!-- 					<constructor-arg value="127.0.0.1"/> -->
<!-- 					<constructor-arg type="int" value="7000"/> -->
<!-- 					<constructor-arg value="instance:01"/> -->
<!-- 			 	</bean> -->
<!-- 				<bean class="redis.clients.jedis.JedisShardInfo"> -->
<!-- 					<constructor-arg value="127.0.0.1"/> -->
<!-- 					<constructor-arg type="int" value="7001"/> -->
<!-- 					<constructor-arg value="instance:02"/> -->
<!-- 				</bean> -->
<!-- 				<bean class="redis.clients.jedis.JedisShardInfo"> -->
<!-- 					<constructor-arg value="127.0.0.1"/> -->
<!-- 					<constructor-arg type="int" value="7003"/> -->
<!-- 					<constructor-arg value="instance:03"/> -->
<!-- 				</bean> -->
<!-- 			 </list> -->
<!-- 	 	</constructor-arg> -->
<!-- 	</bean> -->

<!-- 	<bean id="redisSentinelPool" class="redis.clients.jedis.JedisSentinelPool"> -->
<!-- 	 	<constructor-arg index="0" value="redis-master" /> -->
<!-- 	 	<constructor-arg index="1"> -->
<!-- 			<set> -->
<!-- 				<value>localhost:6379</value> -->
<!-- 			</set> -->
<!-- 	 	</constructor-arg> -->
<!-- 	 	<constructor-arg index="2" ref="jedisPoolConfig" /> -->
<!-- 	</bean> -->

	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="poolConfig" ref="jedisPoolConfig" />
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
	</bean>

	<bean id="kryoerRedisSerializer" class="com.vteba.cache.redis.KryoerRedisSerializer">
		<property name="kryoer" ref="kryoer" />
	</bean>

	<bean id="stringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="defaultSerializer" ref="kryoerRedisSerializer" />
		<property name="keySerializer" ref="stringSerializer" />
		<property name="stringSerializer" ref="stringSerializer" />
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>
	
	<bean id="redisService" class="com.vteba.cache.redis.RedisService">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>
	
	<bean id="jedisTemplate" class="com.vteba.cache.redis.support.JedisTemplateFactoryBean">
		<property name="host" value="127.0.0.1" />
		<property name="port" value="6379" />
		<property name="kryoer" ref="kryoer" />
	</bean>
	
	<!-- 根据配置运行时选择schema -->
	<bean id="schemaServiceInterceptor" class="com.vteba.tx.jdbc.mybatis.interceptor.SchemaServiceInterceptor">
		<property name="proxyInterface" value="true" />
	</bean>
	<aop:config>
<!-- 		<aop:pointcut expression="execution(* com.vteba.*.*.service.impl.*.*(..))" id="serviceSessionPointCut"/> -->
<!-- 		<aop:pointcut expression="execution(* com.vteba..*.generic.impl.*.*(..))" id="commonSessionPointCut"/> -->
		<aop:pointcut expression="execution(* com.vteba.*.*.dao.*.*(..))" id="serviceSessionPointCut"/>
<!-- 		<aop:pointcut expression="execution(* com.vteba..*.mybatis.spi.*.*(..))" id="commonSessionPointCut"/> -->
		<aop:advisor advice-ref="schemaServiceInterceptor" pointcut-ref="serviceSessionPointCut"/>
<!-- 		<aop:advisor advice-ref="serviceSchemaInterceptor" pointcut-ref="commonSessionPointCut"/> -->
	</aop:config>
</beans>